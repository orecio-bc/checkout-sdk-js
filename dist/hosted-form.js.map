{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///./src/order/map-to-internal-order.ts","webpack:///./src/cart/map-to-internal-cart.ts","webpack:///./src/promotion/map-to-discount-notifications.ts","webpack:///external \"@bigcommerce/bigpay-client\"","webpack:///./src/billing/is-billing-address-like.ts","webpack:///./src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack:///./src/hosted-form/iframe-content/card-number-formatter.ts","webpack:///./src/coupon/map-to-internal-coupon.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/payment/payment-request-transformer.ts","webpack:///./src/payment/payment-request-sender.ts","webpack:///./src/coupon/map-to-internal-gift-certificate.ts","webpack:///./src/common/iframe/iframe-event-poster.ts","webpack:///./src/common/iframe/iframe-event-listener.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack:///./src/hosted-form/iframe-content/get-hosted-input-storage.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-storage.ts","webpack:///./src/hosted-form/hosted-field-type.ts","webpack:///./src/hosted-form/iframe-content/map-to-autocomplete-type.ts","webpack:///./src/hosted-form/iframe-content/hosted-autocomplete-fieldset.ts","webpack:///./src/hosted-form/iframe-content/hosted-input.ts","webpack:///./src/hosted-form/iframe-content/hosted-card-expiry-input.ts","webpack:///./src/hosted-form/iframe-content/hosted-card-number-input.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-aggregator.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-payment-handler.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-validator.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-factory.ts","webpack:///./src/hosted-form/iframe-content/map-to-accessibility-label.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-initializer.ts","webpack:///./src/hosted-form/iframe-content/initialize-hosted-input.ts","webpack:///./src/hosted-form/iframe-content/notify-initialize-error.ts","webpack:///./src/bundles/hosted-form.ts","webpack:///external \"lodash\"","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///external \"rxjs\"","webpack:///external \"card-validator\"","webpack:///./src/payment/is-vaulted-instrument.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-events.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/common/iframe/is-iframe-event.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/address/map-to-internal-address.ts","webpack:///./src/cart/map-to-internal-line-items.ts","webpack:///./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack:///./src/hosted-form/hosted-field-events.ts","webpack:///./src/cart/map-to-internal-line-item.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/shipping/map-to-internal-shipping-option.ts","webpack:///./src/common/utility/amount-transformer.ts","webpack:///./src/common/url/parse-url.ts","webpack:///external \"yup\"","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/customer/map-to-internal-customer.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","mapToInternalOrder","order","orderMeta","payments","items","decimalPlaces","currency","amountTransformer","id","orderId","lineItems","code","customerCanBeCreated","payment","mapToInternalOrderPayment","subtotal","amount","baseAmount","integerAmount","toInteger","coupon","discountedAmount","coupons","sum","map","discount","discountAmount","token","orderToken","callbackUrl","discountNotifications","giftCertificate","providerId","totalDiscountedAmount","item","appliedGiftCertificates","detail","remainingBalance","remaining","balance","purchaseDate","socialData","mapToInternalSocialDataList","status","hasDigitalItems","isDownloadable","isComplete","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","storeCredit","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","grandTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","step","helpText","instructions","returnUrl","socialDataObject","physicalItems","digitalItems","forEach","lineItem","reduce","socialMedia","description","image","imageUrl","url","link","shareText","text","sharingLink","channelName","channel","channelCode","mapToInternalCart","checkout","promotions","notifications","cart","promotion","banners","banner","push","placeholders","discountType","message","messageHtml","giftCertificates","certificate","used","required","isShippingRequired","customer","taxSubtotal","isBillingAddressLike","address","format","split","RegExp","month","year","trimmedMonth","slice","trimmedYear","length","toObject","test","card","maxLength","info","lengths","unformattedValue","this","unformat","gaps","filter","gapIndex","output","index","join","replace","couponTypes","mapToInternalCoupon","displayName","indexOf","couponType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","_cardExpiryFormatter","_cardNumberFormatter","transform","checkoutState","billingAddress","getBillingAddress","getCheckout","getCustomer","getOrder","paymentMethod","paymentMethods","getPaymentMethod","methodId","gatewayId","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","getOrderMeta","internalCustomer","authToken","paymentData","getPaymentToken","vaultAccessToken","additionalAction","_transformPaymentMethod","quoteMeta","request","geoCountryCode","source","store","storeProfile","transformWithHostedFormData","values","data","nonce","paymentMethodMeta","consignment","selectedShippingOption","_transformHostedInputValues","context","method","gateway","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","hostedFormNonce","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","_client","submitPayment","payload","Promise","resolve","reject","error","response","_transformResponse","initializeOffsitePayment","target","headers","body","statusText","mapToInternalGiftCertificate","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","options","window","Error","result","pipe","successType","errorType","toPromise","postMessage","setTarget","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","errors","fieldErrors","storage","setNonce","_nonce","getNonce","getHostedInputStorage","HostedFieldType","mapToAutocompleteType","CardCode","CardExpiry","CardName","CardNumber","_form","_fieldTypes","_inputAggregator","_handleChange","targetInput","targetHostedInput","getInputs","find","input","_getAutocompleteElementId","getType","setValue","_inputs","_createInput","attach","appendChild","detach","parentElement","removeChild","document","createElement","autocomplete","tabIndex","style","position","opacity","zIndex","_type","_placeholder","_accessibilityLabel","_autocomplete","_styles","_fontUrls","_eventListener","_eventPoster","_inputValidator","_paymentHandler","_isTouched","_handleInput","_processChange","_handleBlur","_applyStyles","default","_validateForm","Blurred","fieldType","_handleFocus","focus","Focused","_handleValidate","_handleSubmit","preventDefault","Entered","_input","ValidateRequested","SubmitRequested","handle","_configureInput","getValue","isTouched","_loadFonts","parent","hostedInput","AttachSucceeded","_unloadFonts","_formatValue","_notifyChange","_value","Changed","backgroundColor","border","display","height","margin","outline","padding","width","placeholder","setAttribute","styles","allowedStyles","color","fontFamily","fontSize","fontWeight","keys","_fontLinks","hostname","querySelector","rel","href","head","undefined","getInputValues","validate","results","isValid","Validated","_previousValue","form","accessibilityLabel","fontUrls","eventListener","eventPoster","inputAggregator","inputValidator","paymentHandler","_formatter","_autocompleteFieldset","cardInfo","prevCardInfo","CardTypeChanged","cardType","unformattedPreviousValue","bin","isPotentiallyValid","substr","BinChanged","selectionEnd","formattedValue","setSelectionRange","_parentWindow","Array","frames","frame","DOMException","_inputStorage","_paymentRequestSender","_paymentRequestTransformer","SubmitFailed","SubmitSucceeded","_isPaymentErrorResponse","_cardInstrument","_configureCardValidator","requiredFields","schemas","_getCardCodeSchema","CardCodeVerification","_getCardCodeVerificationSchema","_getCardExpirySchema","_getCardNameSchema","_getCardNumberSchema","CardNumberVerification","_getCardNumberVerificationSchema","abortEarly","inner","innerError","path","discoverInfo","getTypeInfo","visaInfo","updateCard","patterns","addCard","niceType","size","_mapFromInstrumentCardType","brand","max","last4","_parentOrigin","cardInstrument","mapToAccessibilityLabel","_createNumberInput","_createExpiryInput","_createPaymentHandler","_factory","_storage","initialize","containerId","_createFormContainer","_resetPageStyles","AttachRequested","field","getElementById","node","overflow","container","button","noValidate","initializeHostedInput","parentOrigin","poster","notifyInitializeError","AttachFailed","setPrototypeOf","__proto__","captureStackTrace","stack","isVaultedInstrument","instrument","Boolean","instrumentId","isHostedVaultedInstrument","isFormattedVaultedInstrument","formattedInstrument","formattedPayload","bigpay_token","HostedInputEventType","isIframeEvent","HOSTED","OFFLINE","mapToInternalAddress","addressId","firstName","lastName","company","addressLine1","address1","addressLine2","address2","city","province","stateOrProvince","provinceCode","stateOrProvinceCode","postCode","postalCode","country","countryCode","phone","customFields","mapToInternalLineItems","itemMap","idKey","amountAfterDiscount","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","mapToInternalLineItemType","HostedFieldEventType","mapToInternalLineItem","extendedListPrice","extendedSalePrice","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","sku","categoryNames","productId","option","addedByPromotion","mapToInternalShippingOption","isSelected","price","cost","selected","isRecommended","transitTime","_decimalPlaces","Math","round","pow","parseUrl","anchor","port","hash","protocol","pathname","search","bindMethodDecorator","_","descriptor","boundMethod","set","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","mapToInternalCustomer","addresses","customerId","isGuest","email","fullName","customerGroupName","customerGroup"],"mappings":"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","file":"hosted-form.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 196);\n","module.exports = require(\"tslib\");","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map(info => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter(gapIndex => unformattedValue.length > gapIndex)\n            .reduce((output, gapIndex, index) => (\n                [\n                    output.slice(0, gapIndex + index),\n                    output.slice(gapIndex + index),\n                ].join(NUMBER_SEPARATOR)\n            ), unformattedValue);\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport { CardExpiryFormatter, CardNumberFormatter, HostedInputValues } from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, { HostedCreditCardInstrument, HostedVaultedInstrument, PaymentInstrument } from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) || isFormattedVaultedInstrument(payment.paymentData)) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(values: HostedInputValues, data: HostedFormOrderData, nonce: string): PaymentRequestBody {\n        const { additionalAction, authToken, checkout, config, order, orderMeta, payment = {}, paymentMethod, paymentMethodMeta } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            additionalAction,\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: order && order.billingAddress && checkout && mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress: order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress: shippingAddress && checkout && mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment, nonce),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: config && pick(config.storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(\n        values: HostedInputValues,\n        payment: HostedCreditCardInstrument | HostedVaultedInstrument,\n        nonce: string\n    ): PaymentInstrument {\n        return 'instrumentId' in payment ?\n            {\n                ...payment,\n                ccCvv: values.cardCodeVerification,\n                ccNumber: values.cardNumberVerification && this._cardNumberFormatter.unformat(values.cardNumberVerification),\n                hostedFormNonce: nonce,\n            } :\n            {\n                ...payment,\n                ccCvv: values.cardCode,\n                ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                ccName: values.cardName || '',\n                ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n                hostedFormNonce: nonce,\n            };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response<any>> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response<any> {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<TSuccessEvent extends IframeEvent, TErrorEvent extends IframeEvent> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent>;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent> | void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result = options && fromEvent<MessageEvent>(window, 'message')\n            .pipe(\n                filter(event =>\n                    event.origin === this._targetOrigin &&\n                    isIframeEvent(event.data, event.data.type) &&\n                    [options.successType, options.errorType].indexOf(event.data.type) !== -1\n                ),\n                map(event => {\n                    if (options.errorType === event.data.type) {\n                        throw event.data;\n                    }\n\n                    return event.data;\n                }),\n                take(1)\n            )\n            .toPromise();\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to invalid configuration provided for the hosted payment form.');\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(\n        public errors: HostedInputValidateErrorDataMap\n    ) {\n        super([\n            'Unable to proceed due to invalid user input values',\n            ...flatMap(values(errors), fieldErrors => map(fieldErrors, ({ message }) => message)),\n        ].join('. '));\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import HostedInputStorage from './hosted-input-storage';\n\nlet storage: HostedInputStorage | null;\n\nexport default function getHostedInputStorage(): HostedInputStorage {\n    storage = storage || new HostedInputStorage();\n\n    return storage;\n}\n","export default class HostedInputStorage {\n    private _nonce?: string;\n\n    setNonce(nonce: string): void {\n        this._nonce = nonce;\n    }\n\n    getNonce(): string | undefined {\n        return this._nonce;\n    }\n}\n","enum HostedFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport default HostedFieldType;\n","import HostedFieldType from '../hosted-field-type';\n\nexport default function mapToAutocompleteType(type: HostedFieldType): string {\n    switch (type) {\n    case HostedFieldType.CardCode:\n        return 'cc-csc';\n\n    case HostedFieldType.CardExpiry:\n        return 'cc-exp';\n\n    case HostedFieldType.CardName:\n        return 'cc-name';\n\n    case HostedFieldType.CardNumber:\n        return 'cc-number';\n\n    default:\n        return '';\n    }\n}\n","import { kebabCase } from 'lodash';\n\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport mapToAutocompleteType from './map-to-autocomplete-type';\n\nexport default class HostedAutocompleteFieldset {\n    private _inputs: HTMLInputElement[];\n\n    constructor(\n        private _form: HTMLFormElement,\n        private _fieldTypes: HostedFieldType[],\n        private _inputAggregator: HostedInputAggregator\n    ) {\n        this._inputs = this._fieldTypes.map(type => this._createInput(type));\n    }\n\n    attach(): void {\n        this._inputs.forEach(input => this._form.appendChild(input));\n    }\n\n    detach(): void {\n        this._inputs.forEach(input => {\n            if (!input.parentElement) {\n                return;\n            }\n\n            input.parentElement.removeChild(input);\n        });\n    }\n\n    private _createInput(type: HostedFieldType): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.autocomplete = mapToAutocompleteType(type);\n        input.id = this._getAutocompleteElementId(type);\n        input.tabIndex = -1;\n        input.style.position = 'absolute';\n        input.style.opacity = '0';\n        input.style.zIndex = '-1';\n\n        input.addEventListener('change', this._handleChange);\n\n        return input;\n    }\n\n    private _handleChange: (event: Event) => void = event => {\n        const targetInput = event.target as HTMLInputElement;\n\n        if (!targetInput) {\n            throw new Error('Unable to get a reference to the target of the change event.');\n        }\n\n        const targetHostedInput = this._inputAggregator.getInputs()\n            .find(input => this._getAutocompleteElementId(input.getType()) === targetInput.id);\n\n        if (!targetHostedInput) {\n            return;\n        }\n\n        targetHostedInput.setValue(targetInput.value);\n    };\n\n    private _getAutocompleteElementId(type: HostedFieldType): string {\n        return `autocomplete-${kebabCase(type)}`;\n    }\n}\n","import { kebabCase } from 'lodash';\n\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { parseUrl } from '../../common/url';\nimport { HostedFieldEventMap, HostedFieldEventType, HostedFieldValidateRequestEvent } from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport HostedInputStyles, { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\nimport HostedInputWindow from './hosted-input-window';\n\nexport default class HostedInput {\n    protected _input: HTMLInputElement;\n    protected _previousValue?: string;\n    private _fontLinks?: HTMLLinkElement[];\n    private _isTouched: boolean = false;\n\n    /**\n     * @internal\n     */\n    constructor(\n        protected _type: HostedFieldType,\n        protected _form: HTMLFormElement,\n        protected _placeholder: string,\n        protected _accessibilityLabel: string,\n        protected _autocomplete: string,\n        protected _styles: HostedInputStylesMap,\n        protected _fontUrls: string[],\n        protected _eventListener: IframeEventListener<HostedFieldEventMap>,\n        protected _eventPoster: IframeEventPoster<HostedInputEvent>,\n        protected _inputAggregator: HostedInputAggregator,\n        protected _inputValidator: HostedInputValidator,\n        protected _paymentHandler: HostedInputPaymentHandler\n    ) {\n        this._input = document.createElement('input');\n\n        this._input.addEventListener('input', this._handleInput);\n        this._input.addEventListener('blur', this._handleBlur);\n        this._input.addEventListener('focus', this._handleFocus);\n        this._eventListener.addListener(HostedFieldEventType.ValidateRequested, this._handleValidate);\n        this._eventListener.addListener(HostedFieldEventType.SubmitRequested, this._paymentHandler.handle);\n\n        this._configureInput();\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    getValue(): string {\n        return this._input.value;\n    }\n\n    setValue(value: string): void {\n        this._processChange(value);\n    }\n\n    isTouched(): boolean {\n        return this._isTouched;\n    }\n\n    attach(): void {\n        this._form.appendChild(this._input);\n        this._form.addEventListener('submit', this._handleSubmit);\n\n        this._loadFonts();\n\n        this._eventPoster.setTarget(window.parent);\n        this._eventListener.listen();\n\n        // Assign itself to the global so it can be accessed by its sibling frames\n        (window as unknown as HostedInputWindow).hostedInput = this;\n\n        this._eventPoster.post({ type: HostedInputEventType.AttachSucceeded });\n    }\n\n    detach(): void {\n        if (this._input.parentElement) {\n            this._input.parentElement.removeChild(this._input);\n        }\n\n        this._form.removeEventListener('submit', this._handleSubmit);\n        this._unloadFonts();\n\n        this._eventListener.stopListen();\n    }\n\n    protected _formatValue(value: string): void {\n        this._input.value = value;\n    }\n\n    protected _notifyChange(_value: string): void {\n        this._eventPoster.post({\n            type: HostedInputEventType.Changed,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    }\n\n    private _configureInput(): void {\n        this._input.style.backgroundColor = 'transparent';\n        this._input.style.border = '0';\n        this._input.style.display = 'block';\n        this._input.style.height = '100%';\n        this._input.style.margin = '0';\n        this._input.style.outline = 'none';\n        this._input.style.padding = '0';\n        this._input.style.width = '100%';\n        this._input.id = kebabCase(this._type);\n        this._input.placeholder = this._placeholder;\n        this._input.autocomplete = this._autocomplete;\n\n        this._input.setAttribute('aria-label', this._accessibilityLabel);\n\n        this._applyStyles(this._styles.default);\n    }\n\n    private _applyStyles(styles: HostedInputStyles = {}): void {\n        const allowedStyles: { [key in keyof Required<HostedInputStyles>]: HostedInputStyles[key] } = {\n            color: styles.color,\n            fontFamily: styles.fontFamily,\n            fontSize: styles.fontSize,\n            fontWeight: styles.fontWeight,\n        };\n        const styleKeys = Object.keys(allowedStyles) as Array<keyof HostedInputStyles>;\n\n        styleKeys.forEach(key => {\n            if (!allowedStyles[key]) {\n                return;\n            }\n\n            this._input.style[key] = allowedStyles[key] || '';\n        });\n    }\n\n    private _loadFonts(): void {\n        if (this._fontLinks) {\n            return;\n        }\n\n        this._fontLinks = this._fontUrls\n            .filter(url => parseUrl(url).hostname === 'fonts.googleapis.com')\n            .filter(url => !document.querySelector(`link[href='${url}'][rel='stylesheet']`))\n            .map(url => {\n                const link = document.createElement('link');\n\n                link.rel = 'stylesheet';\n                link.href = url;\n\n                document.head.appendChild(link);\n\n                return link;\n            });\n    }\n\n    private _unloadFonts(): void {\n        if (!this._fontLinks) {\n            return;\n        }\n\n        this._fontLinks.forEach(link => {\n            if (!link.parentElement) {\n                return;\n            }\n\n            link.parentElement.removeChild(link);\n        });\n\n        this._fontLinks = undefined;\n    }\n\n    private async _validateForm(): Promise<void> {\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        if (results.isValid) {\n            this._applyStyles(this._styles.default);\n        } else {\n            this._applyStyles(this._styles.error);\n        }\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n    }\n\n    private _processChange(value: string): void {\n        if (value === this._previousValue) {\n            return;\n        }\n\n        this._isTouched = true;\n\n        this._formatValue(value);\n        this._validateForm();\n        this._notifyChange(value);\n\n        this._previousValue = value;\n    }\n\n    private _handleInput: (event: Event) => void = event => {\n        const input = event.target as HTMLInputElement;\n\n        this._processChange(input.value);\n    };\n\n    private _handleBlur: (event: Event) => void = () => {\n        this._applyStyles(this._styles.default);\n        this._validateForm();\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Blurred,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _handleFocus: (event: Event) => void = () => {\n        this._applyStyles(this._styles.focus);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Focused,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n\n    private _handleValidate: (event: HostedFieldValidateRequestEvent) => void = () => {\n        this._validateForm();\n    };\n\n    private _handleSubmit: (event: Event) => void = event => {\n        event.preventDefault();\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Entered,\n            payload: {\n                fieldType: this._type,\n            },\n        });\n    };\n}\n","import { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardExpiryFormatter from './card-expiry-formatter';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent } from './hosted-input-events';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedCardExpiryInput extends HostedInput {\n    /**\n     * @internal\n     */\n    constructor(\n        form: HTMLFormElement,\n        placeholder: string,\n        accessibilityLabel: string,\n        autocomplete: string,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        eventListener: IframeEventListener<HostedFieldEventMap>,\n        eventPoster: IframeEventPoster<HostedInputEvent>,\n        inputAggregator: HostedInputAggregator,\n        inputValidator: HostedInputValidator,\n        paymentHandler: HostedInputPaymentHandler,\n        private _formatter: CardExpiryFormatter\n    ) {\n        super(\n            HostedFieldType.CardExpiry,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            eventListener,\n            eventPoster,\n            inputAggregator,\n            inputValidator,\n            paymentHandler\n        );\n    }\n\n    protected _formatValue(value: string): void {\n        this._input.value = this._formatter.format(value);\n    }\n}\n","import { number } from 'card-validator';\nimport { get } from 'lodash';\n\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardNumberFormatter from './card-number-formatter';\nimport HostedAutocompleteFieldset from './hosted-autocomplete-fieldset';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedCardNumberInput extends HostedInput {\n    /**\n     * @internal\n     */\n    constructor(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        placeholder: string,\n        accessibilityLabel: string,\n        autocomplete: string,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        eventListener: IframeEventListener<HostedFieldEventMap>,\n        eventPoster: IframeEventPoster<HostedInputEvent>,\n        inputAggregator: HostedInputAggregator,\n        inputValidator: HostedInputValidator,\n        paymentHandler: HostedInputPaymentHandler,\n        private _autocompleteFieldset: HostedAutocompleteFieldset,\n        private _formatter: CardNumberFormatter\n    ) {\n        super(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            eventListener,\n            eventPoster,\n            inputAggregator,\n            inputValidator,\n            paymentHandler\n        );\n    }\n\n    attach(): void {\n        super.attach();\n\n        this._autocompleteFieldset.attach();\n    }\n\n    protected _notifyChange(value: string): void {\n        const cardInfo = number(value).card;\n        const prevCardInfo = this._previousValue && number(this._previousValue).card;\n\n        if (get(prevCardInfo, 'type') !== get(cardInfo, 'type')) {\n            this._eventPoster.post({\n                type: HostedInputEventType.CardTypeChanged,\n                payload: {\n                    cardType: cardInfo ? cardInfo.type : undefined,\n                },\n            });\n        }\n\n        const unformattedValue = this._formatter.unformat(value);\n        const unformattedPreviousValue = this._previousValue ? this._formatter.unformat(this._previousValue) : '';\n\n        const bin = unformattedValue.length >= 6 && number(unformattedValue).isPotentiallyValid ? unformattedValue.substr(0, 6) : '';\n        const prevBin = unformattedPreviousValue.length >= 6 ? unformattedPreviousValue.substr(0, 6) : '';\n\n        if (bin !== prevBin) {\n            this._eventPoster.post({\n                type: HostedInputEventType.BinChanged,\n                payload: { bin },\n            });\n        }\n    }\n\n    protected _formatValue(value: string): void {\n        const selectionEnd = this._input.selectionEnd;\n        const formattedValue = this._formatter.format(value);\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this._input.setSelectionRange(formattedValue.length, formattedValue.length);\n        } else {\n            this._input.setSelectionRange(selectionEnd || 0, selectionEnd || 0);\n        }\n\n        this._input.value = formattedValue;\n    }\n}\n","import HostedInput from './hosted-input';\nimport HostedInputValues from './hosted-input-values';\nimport HostedInputWindow from './hosted-input-window';\n\nexport default class HostedInputAggregator {\n    constructor(\n        private _parentWindow: Window\n    ) {}\n\n    getInputs(filter?: (field: HostedInput) => boolean): HostedInput[] {\n        return Array.prototype.slice.call(this._parentWindow.frames)\n            .reduce((result: Window[], frame: Window) => {\n                try {\n                    const input = (frame as HostedInputWindow).hostedInput;\n\n                    if (!input || (filter && !filter(input))) {\n                        return result;\n                    }\n\n                    return [...result, input];\n                } catch (error) {\n                    if (error instanceof DOMException) {\n                        return result;\n                    }\n\n                    // IE11 doesn't throw `DOMException`\n                    if (error instanceof Error && error.message === 'Permission denied') {\n                        return result;\n                    }\n\n                    throw error;\n                }\n            }, []);\n    }\n\n    getInputValues(filter?: (field: HostedInput) => boolean): HostedInputValues {\n        return this.getInputs(filter)\n            .reduce((result, input) => {\n                return {\n                    ...result,\n                    [input.getType()]: input.getValue(),\n                };\n            }, {} as HostedInputValues);\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { snakeCase } from 'lodash';\n\nimport { PaymentErrorResponseBody } from '../../common/error';\nimport { IframeEventPoster } from '../../common/iframe';\nimport { PaymentRequestSender, PaymentRequestTransformer } from '../../payment';\nimport { InvalidHostedFormValueError } from '../errors';\nimport { HostedFieldSubmitRequestEvent } from '../hosted-field-events';\n\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport { HostedInputEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputStorage from './hosted-input-storage';\nimport HostedInputValidator from './hosted-input-validator';\n\nexport default class HostedInputPaymentHandler {\n    constructor(\n        private _inputAggregator: HostedInputAggregator,\n        private _inputValidator: HostedInputValidator,\n        private _inputStorage: HostedInputStorage,\n        private _eventPoster: IframeEventPoster<HostedInputEvent>,\n        private _paymentRequestSender: PaymentRequestSender,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    handle: (event: HostedFieldSubmitRequestEvent) => Promise<void> = async ({ payload: { data } }) => {\n        const values = this._inputAggregator.getInputValues();\n        const results = await this._inputValidator.validate(values);\n\n        this._eventPoster.post({\n            type: HostedInputEventType.Validated,\n            payload: results,\n        });\n\n        if (!results.isValid) {\n            const error = new InvalidHostedFormValueError(results.errors);\n\n            return this._eventPoster.post({\n                type: HostedInputEventType.SubmitFailed,\n                payload: {\n                    error: { code: snakeCase(error.name), message: error.message },\n                },\n            });\n        }\n\n        try {\n            await this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transformWithHostedFormData(\n                    values,\n                    data,\n                    this._inputStorage.getNonce() || ''\n                )\n            );\n\n            this._eventPoster.post({ type: HostedInputEventType.SubmitSucceeded });\n        } catch (error) {\n            this._eventPoster.post({\n                type: HostedInputEventType.SubmitFailed,\n                payload: this._isPaymentErrorResponse(error) ?\n                    { error: error.body.errors[0], response: error } :\n                    { error: { code: snakeCase(error.name), message: error.message } },\n            });\n        }\n    };\n\n    private _isPaymentErrorResponse(response: any): response is Response<PaymentErrorResponseBody> {\n        const { body: { errors = [] } = {} } = response || {};\n\n        return (\n            typeof (errors[0] && errors[0].code) === 'string' &&\n            typeof (errors[0] && errors[0].message) === 'string'\n        );\n    }\n}\n","import { creditCardType, cvv, expirationDate, number } from 'card-validator';\nimport { includes } from 'lodash';\nimport { object, string, StringSchema, ValidationError } from 'yup';\n\nimport { CardInstrument } from '../../payment/instrument';\nimport HostedFieldType from '../hosted-field-type';\n\nimport { HostedInputValidateErrorDataMap } from './hosted-input-validate-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\nimport HostedInputValues from './hosted-input-values';\n\nexport default class HostedInputValidator {\n    constructor(\n        private _cardInstrument?: CardInstrument\n    ) {\n        this._configureCardValidator();\n    }\n\n    async validate(values: HostedInputValues): Promise<HostedInputValidateResults> {\n        const requiredFields = Object.keys(values);\n        const schemas: { [key in keyof HostedInputValues]: StringSchema } = {};\n        const results: HostedInputValidateResults = {\n            errors: {},\n            isValid: true,\n        };\n\n        if (includes(requiredFields, HostedFieldType.CardCode)) {\n            schemas.cardCode = this._getCardCodeSchema();\n            results.errors.cardCode = [];\n        }\n\n        if (includes(requiredFields, HostedFieldType.CardCodeVerification)) {\n            schemas.cardCodeVerification = this._getCardCodeVerificationSchema();\n            results.errors.cardCodeVerification = [];\n        }\n\n        if (includes(requiredFields, HostedFieldType.CardExpiry)) {\n            schemas.cardExpiry = this._getCardExpirySchema();\n            results.errors.cardExpiry = [];\n        }\n\n        if (includes(requiredFields, HostedFieldType.CardName)) {\n            schemas.cardName = this._getCardNameSchema();\n            results.errors.cardName = [];\n        }\n\n        if (includes(requiredFields, HostedFieldType.CardNumber)) {\n            schemas.cardNumber = this._getCardNumberSchema();\n            results.errors.cardNumber = [];\n        }\n\n        if (includes(requiredFields, HostedFieldType.CardNumberVerification)) {\n            schemas.cardNumberVerification = this._getCardNumberVerificationSchema();\n            results.errors.cardNumberVerification = [];\n        }\n\n        try {\n            await object(schemas)\n                .validate(values, { abortEarly: false });\n\n            return results;\n        } catch (error) {\n            if (error.name !== 'ValidationError') {\n                throw error;\n            }\n\n            return {\n                errors: (Object.keys(results.errors) as Array<keyof HostedInputValidateErrorDataMap>)\n                    .reduce((result, fieldType) => ({\n                        ...result,\n                        [fieldType]: (error as ValidationError).inner\n                            .filter(innerError => innerError.path === fieldType)\n                            .map(innerError => ({\n                                fieldType: innerError.path,\n                                message: innerError.errors.join(' '),\n                                type: innerError.type,\n                            })),\n                    }), {} as HostedInputValidateErrorDataMap),\n                isValid: false,\n            };\n        }\n    }\n\n    private _configureCardValidator(): void {\n        const discoverInfo = creditCardType.getTypeInfo('discover');\n        const visaInfo = creditCardType.getTypeInfo('visa');\n\n        // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n        creditCardType.updateCard('visa', {\n            lengths: [13, ...(visaInfo.lengths || [])],\n        });\n\n        // Add support for 8-BIN Discover Cards.\n        creditCardType.updateCard('discover', {\n            patterns: [\n                ...(discoverInfo.patterns || []),\n                [810, 817],\n            ],\n        });\n\n        creditCardType.addCard({\n            niceType: 'Mada',\n            type: 'mada',\n            patterns: [\n                400861, 401757, 407197, 407395, 409201,\n                410685, 412565, 417633, 419593, 422817,\n                422818, 422819, 428331, 428671, 428672,\n                428673, 431361, 432328, 434107, 439954,\n                440533, 440647, 440795, 445564, 446393,\n                446404, 446672, 455036, 455708, 457865,\n                458456, 462220, 468540, 468541, 468542,\n                468543, 483010, 483011, 483012, 484783,\n                486094, 486095, 486096, 489317, 489318,\n                489319, 493428, 504300, 506968, 508160,\n                513213, 520058, 521076, 524130, 524514,\n                529415, 529741, 530060, 530906, 531095,\n                531196, 532013, 535825, 535989, 536023,\n                537767, 539931, 543085, 543357, 549760,\n                554180, 557606, 558848, 585265, 588845,\n                588846, 588847, 588848, 588849, 588850,\n                588851, 588982, 588983, 589005, 589206,\n                604906, 605141, 636120, 968201, 968202,\n                968203, 968204, 968205, 968206, 968207,\n                968208, 968209, 968210, 968211,\n            ],\n            gaps: [4, 8, 12],\n            lengths: [16, 18, 19],\n            code: {\n                name: 'CVV',\n                size: 3,\n            },\n        });\n    }\n\n    private _getCardCodeSchema(): StringSchema {\n        return string()\n            .required('CVV is required')\n            .test({\n                message: 'CVV must be valid',\n                name: 'invalid_card_code',\n                test(value) {\n                    const { card } = number((this.parent as HostedInputValues).cardNumber || '');\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    private _getCardCodeVerificationSchema(): StringSchema {\n        return string()\n            .required('CVV is required')\n            .test({\n                message: 'CVV must be valid',\n                name: 'invalid_card_code',\n                test: (value = '') => {\n                    const cardType = this._cardInstrument && this._mapFromInstrumentCardType(this._cardInstrument.brand);\n                    const cardInfo = cardType && creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    private _getCardExpirySchema(): StringSchema {\n        return string()\n            .required('Expiration date is required')\n            .test({\n                message: 'Expiration date must be a valid future date in MM / YY format',\n                name: 'invalid_card_expiry',\n                test: value => expirationDate(value).isValid,\n            });\n    }\n\n    private _getCardNameSchema(): StringSchema {\n        return string()\n            .max(200)\n            .required('Full name is required');\n    }\n\n    private _getCardNumberSchema(): StringSchema {\n        return string()\n            .required('Credit card number is required')\n            .test({\n                message: 'Credit card number must be valid',\n                name: 'invalid_card_number',\n                test: value => number(value).isValid,\n            });\n    }\n\n    private _getCardNumberVerificationSchema(): StringSchema {\n        return string()\n            .required('Credit card number is required')\n            .test({\n                message: 'Credit card number must be valid',\n                name: 'invalid_card_number',\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: 'The card number entered does not match the card stored in your account',\n                name: 'mismatched_card_number',\n                test: (value = '') => this._cardInstrument ?\n                    value.slice(-this._cardInstrument.last4.length) === this._cardInstrument.last4 :\n                    false,\n            });\n    }\n\n    private _mapFromInstrumentCardType(type: string): string {\n        switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        default:\n            return type;\n        }\n    }\n}\n","import { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { PaymentRequestSender, PaymentRequestTransformer } from '../../payment';\nimport { CardInstrument } from '../../payment/instrument';\nimport HostedFieldType from '../hosted-field-type';\n\nimport CardExpiryFormatter from './card-expiry-formatter';\nimport CardNumberFormatter from './card-number-formatter';\nimport getHostedInputStorage from './get-hosted-input-storage';\nimport HostedAutocompleteFieldset from './hosted-autocomplete-fieldset';\nimport HostedCardExpiryInput from './hosted-card-expiry-input';\nimport HostedCardNumberInput from './hosted-card-number-input';\nimport HostedInput from './hosted-input';\nimport HostedInputAggregator from './hosted-input-aggregator';\nimport HostedInputPaymentHandler from './hosted-input-payment-handler';\nimport { HostedInputStylesMap } from './hosted-input-styles';\nimport HostedInputValidator from './hosted-input-validator';\nimport mapToAccessibilityLabel from './map-to-accessibility-label';\nimport mapToAutocompleteType from './map-to-autocomplete-type';\n\nexport default class HostedInputFactory {\n    constructor(\n        private _parentOrigin: string\n    ) {}\n\n    create(\n        form: HTMLFormElement,\n        type: HostedFieldType,\n        styles: HostedInputStylesMap = {},\n        fontUrls: string[] = [],\n        placeholder: string = '',\n        accessibilityLabel: string = mapToAccessibilityLabel(type),\n        cardInstrument?: CardInstrument\n    ): HostedInput {\n        const autocomplete = mapToAutocompleteType(type);\n\n        if (type === HostedFieldType.CardNumber) {\n            return this._createNumberInput(type, form, styles, fontUrls, placeholder, accessibilityLabel, autocomplete);\n        }\n\n        if (type === HostedFieldType.CardNumberVerification) {\n            return this._createNumberInput(type, form, styles, fontUrls, placeholder, accessibilityLabel, autocomplete, cardInstrument);\n        }\n\n        if (type === HostedFieldType.CardExpiry) {\n            return this._createExpiryInput(form, styles, fontUrls, placeholder, accessibilityLabel, autocomplete);\n        }\n\n        if (type === HostedFieldType.CardCodeVerification) {\n            return this._createInput(type, form, styles, fontUrls, placeholder, accessibilityLabel, autocomplete, cardInstrument);\n        }\n\n        return this._createInput(type, form, styles, fontUrls, placeholder, accessibilityLabel, autocomplete);\n    }\n\n    private _createExpiryInput(\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel: string = '',\n        autocomplete: string = ''\n    ): HostedCardExpiryInput {\n        return new HostedCardExpiryInput(\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(),\n            this._createPaymentHandler(),\n            new CardExpiryFormatter()\n        );\n    }\n\n    private _createNumberInput(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel: string = '',\n        autocomplete: string = '',\n        cardInstrument?: CardInstrument\n    ): HostedCardNumberInput {\n        return new HostedCardNumberInput(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(cardInstrument),\n            this._createPaymentHandler(cardInstrument),\n            new HostedAutocompleteFieldset(\n                form,\n                [HostedFieldType.CardCode, HostedFieldType.CardExpiry, HostedFieldType.CardName],\n                new HostedInputAggregator(window.parent)\n            ),\n            new CardNumberFormatter()\n        );\n    }\n\n    private _createInput(\n        type: HostedFieldType,\n        form: HTMLFormElement,\n        styles: HostedInputStylesMap,\n        fontUrls: string[],\n        placeholder: string,\n        accessibilityLabel: string = '',\n        autocomplete: string = '',\n        cardInstrument?: CardInstrument\n    ): HostedInput {\n        return new HostedInput(\n            type,\n            form,\n            placeholder,\n            accessibilityLabel,\n            autocomplete,\n            styles,\n            fontUrls,\n            new IframeEventListener(this._parentOrigin),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(cardInstrument),\n            this._createPaymentHandler(cardInstrument)\n        );\n    }\n\n    private _createPaymentHandler(\n        cardInstrument?: CardInstrument\n    ): HostedInputPaymentHandler {\n        return new HostedInputPaymentHandler(\n            new HostedInputAggregator(window.parent),\n            new HostedInputValidator(cardInstrument),\n            getHostedInputStorage(),\n            new IframeEventPoster(this._parentOrigin, window.parent),\n            new PaymentRequestSender(createBigpayClient()),\n            new PaymentRequestTransformer()\n        );\n    }\n}\n","import HostedFieldType from '../hosted-field-type';\n\nexport default function mapToAccessibilityLabel(type: HostedFieldType): string {\n    switch (type) {\n    case HostedFieldType.CardCode:\n    case HostedFieldType.CardCodeVerification:\n        return 'CVC';\n\n    case HostedFieldType.CardExpiry:\n        return 'Expiration';\n\n    case HostedFieldType.CardName:\n        return 'Name on card';\n\n    case HostedFieldType.CardNumber:\n    case HostedFieldType.CardNumberVerification:\n        return 'Credit card number';\n    }\n}\n","import { fromEvent } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { IframeEventListener } from '../../common/iframe';\nimport { InvalidHostedFormConfigError } from '../errors';\nimport { HostedFieldAttachEvent, HostedFieldEventMap, HostedFieldEventType } from '../hosted-field-events';\n\nimport HostedInput from './hosted-input';\nimport HostedInputFactory from './hosted-input-factory';\nimport HostedInputStorage from './hosted-input-storage';\n\ninterface EventTargetLike<TEvent> {\n    addListener(eventName: string, handler: (event: TEvent) => void): void;\n    removeListener(eventName: string, handler: (event: TEvent) => void): void;\n}\n\nexport default class HostedInputInitializer {\n    constructor(\n        private _factory: HostedInputFactory,\n        private _storage: HostedInputStorage,\n        private _eventListener: IframeEventListener<HostedFieldEventMap>\n    ) {}\n\n    initialize(containerId: string, nonce?: string): Promise<HostedInput> {\n        if (nonce) {\n            this._storage.setNonce(nonce);\n        }\n\n        const form = this._createFormContainer(containerId);\n\n        this._resetPageStyles(containerId);\n        this._eventListener.listen();\n\n        return fromEvent<HostedFieldAttachEvent>(\n            this._eventListener as EventTargetLike<HostedFieldAttachEvent>,\n            HostedFieldEventType.AttachRequested\n        )\n            .pipe(\n                map(({ payload }) => {\n                    const { accessibilityLabel, cardInstrument, fontUrls, placeholder, styles, type } = payload;\n                    const field = this._factory.create(form, type, styles, fontUrls, placeholder, accessibilityLabel, cardInstrument);\n\n                    field.attach();\n\n                    return field;\n                }),\n                take(1)\n            )\n            .toPromise();\n    }\n\n    private _resetPageStyles(containerId: string) {\n        const html = document.querySelector('html');\n        const body = document.querySelector('body');\n        const container = document.getElementById(containerId);\n\n        [html, body, container]\n            .forEach(node => {\n                if (!node) {\n                    return;\n                }\n\n                node.style.height = '100%';\n                node.style.width = '100%';\n                node.style.overflow = 'hidden';\n                node.style.padding = '0';\n                node.style.margin = '0';\n            });\n    }\n\n    private _createFormContainer(containerId: string): HTMLFormElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        const form = document.createElement('form');\n        const button = document.createElement('button');\n\n        form.noValidate = true;\n        form.style.height = '100%';\n        form.style.width = '100%';\n        button.style.display = 'none';\n\n        container.appendChild(form);\n        form.appendChild(button);\n\n        return form;\n    }\n}\n","import { IframeEventListener } from '../../common/iframe';\nimport { HostedFieldEventMap } from '../hosted-field-events';\n\nimport getHostedInputStorage from './get-hosted-input-storage';\nimport HostedInput from './hosted-input';\nimport HostedInputFactory from './hosted-input-factory';\nimport HostedInputInitializer from './hosted-input-initializer';\nimport HostedInputOptions from './hosted-input-options';\n\nexport default function initializeHostedInput(options: HostedInputOptions): Promise<HostedInput> {\n    const { containerId, nonce, parentOrigin } = options;\n    const initializer = new HostedInputInitializer(\n        new HostedInputFactory(parentOrigin),\n        getHostedInputStorage(),\n        new IframeEventListener<HostedFieldEventMap>(parentOrigin)\n    );\n\n    return initializer.initialize(containerId, nonce);\n}\n","import { IframeEventPoster } from '../../common/iframe';\n\nimport { HostedInputAttachErrorEvent, HostedInputEventType } from './hosted-input-events';\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\n\nconst poster = new IframeEventPoster<HostedInputAttachErrorEvent>('*', window.parent);\n\nexport default function notifyInitializeError(error: HostedInputInitializeErrorData): void {\n    poster.post({\n        type: HostedInputEventType.AttachFailed,\n        payload: { error },\n    });\n}\n","export { initializeHostedInput, notifyInitializeError } from '../hosted-form/iframe-content';\n","module.exports = require(\"lodash\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"card-validator\");","import { FormattedPayload, FormattedVaultedInstrument, HostedVaultedInstrument, PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(instrument: PaymentInstrument): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !instrument.hasOwnProperty('ccNumber') &&\n        !instrument.hasOwnProperty('ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(instrument: PaymentInstrument): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>).formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token);\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent = (\n    HostedInputAttachSuccessEvent |\n    HostedInputAttachErrorEvent |\n    HostedInputBinChangeEvent |\n    HostedInputBlurEvent |\n    HostedInputChangeEvent |\n    HostedInputCardTypeChangeEvent |\n    HostedInputEnterEvent |\n    HostedInputFocusEvent |\n    HostedInputSubmitSuccessEvent |\n    HostedInputSubmitErrorEvent |\n    HostedInputValidateEvent\n);\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent = (\n    HostedFieldAttachEvent |\n    HostedFieldSubmitRequestEvent |\n    HostedFieldValidateRequestEvent\n);\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"rxjs/operators\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","module.exports = require(\"yup\");","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n"],"sourceRoot":""}